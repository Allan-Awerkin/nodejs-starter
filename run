#!/bin/bash

#
# Title:
#		Node run script
# Author:
#		Mark K Cowan, mark@battlesnake.co.uk
# License:
#		GNU GPL2
#
# Description:
#		Use to launch a node app which contains many '*.less' and '*.js' files.
#
#		Update mechanism checks target file modification time against source
#		file, and re-generates the target file if required, setting its
#		modification to that of the source file.  Combined (concatenated) files
#		are also produced, based on the names in the 'defaults' file.
#
#		If using an 'app.js' based on the one from my 'netadmin' app, then in
#		debug mode, the raw javascripts are served instead of uglified ones and
#		the lessified stylesheets are not compressed at all.  To see an example
#		of such an 'app.js', use `./run --example`.
#
#		To run a node.js application that is not called 'app.js', see the --app
#		parameter below
#
#
#	Transformation: 
#		./assets/stylesheets/*.less => lessc    => ./public/?/stylesheets/*.css
#		./assets/javascripts/*.js   => uglifyjs => ./public/?/javascripts/*.js
#		where ? = debug/release
#
#	Concatentation:
#		./assets/stylesheets/defaults => ./public/?/stylesheets/lessified.css
#		./assets/javascripts/defaults => ./public/?/javascripts/merged.js
#
#	Syntax:
#		./run [-d|-p] [-r] [-k] [-h] [-e] [-n] [-a file]
#
#		() = compulsory, [] = optional, |=choice, hyphens are optional
#
#		-a / --app <file>   : Name of node.js application to run (defaults to
#		                      'app.js').  Useful for shebang line in script.
#		-c / --clean        : Cleans (deletes) all stylesheets and javascripts
#		                      from the public folders (CAUTION!).
#		-d / --debug        : DEBUG MODE: Script is run in the background of
#		                      the current shell, css/js is not compressed.
#		-e / --example      : Example code snippets for node application, in
#		                      order to make the most out of this script.
#		-h / --help         : Display this help screen (for deeper usage info,
#		                      see --example).
#		-k / --kill         : Kill previous instances (implicit if -d or -p
#		                      specified).
#		-n / --no-start     : Do not start new instances (use with -d/-p-rd/-rp
#		                      to regenerate assets without restarting server).
#		-r / --rebuild      : Rebuilds the public css/js resources.  Typically
#		                      used with -c/--clean.
#		-u / --update       : Update assets (called automatically before
#		                      starting a server instance).
#
#		Specifying -d/--debug or -p/--production without -n/--no-start will
#		trigger an update automatically (-u/--update) before launching the
#		server.  It is advisable to specify -k/--kill when starting a server
#		in order to first kill off previous instances - unless you actually
#		want to have several instances of the server and the script itself
#		will resolve resource conflicts (e.g. EADDRINUSE).
#
#	Macros:
#		./run <macro> [options]
#
#		+production     : -kcrp
#		+debug          : -kcrd
#		+update-assets  : -nu
#		+refresh-assets : -kcr
#		+prepare-release: -kc
#
#	Log files:
#		/var/log/node-$APPNAME.{run,out,err,for}
#		$APPNAME is the name of the working directory
#		.run = output from this script
#		.out = output from app stdout (production only)
#		.err = output from app stderr (production only)
#		.for = output from 'forever' (production only)
#		The app stdout, stderr are dumped to this script's stdout in debug mode
#

#
#	Node application file pseudo-template:
#		#!./run -kcrpa
#
#		/*
#		 * #!./run -kcrda
#		 *   is the shebang for debug mode
#		 *
#		 * #!./run -kcrpa
#		 *   is the shebang for production mode
#		 */
#
#		var express = require('express');
#		var path = require('path');
#		var stdio = require('stdio');
#		var assets = require('./include/assets');
#
#		/*
#		 * DO NOT use 'var', as this would restrict the scope of 'app' rendering it
#		 * inaccessible to controllers/'routes' (or at least without using some simple,
#		 * but ugly `app.locals.app=app` hack...)
#		 */
#		app = express();
#
#		/* Parse params, ./run script passes --debug when launched in debug mode */
#		var opts = stdio.getopt({
#			debug   : { key: 'debug', description: 'Debug mode' }
#		});
#
#		/* Pass "debug" mode onto controllers/'routes'/jade */
#		app.locals.debug = opts.debug;
#
#		/* Produce list of default assets */
#		assets.locate(__dirname, app.locals.debug);
#
#		app.configure(function() {
#			app.set('port', process.env.PORT || 3001);
#			app.set('views', path.join(__dirname, 'views'));
#			app.set('view engine', 'jade');
#			app.use(express.favicon());
#			app.use(express.logger('dev'));
#			app.use(express.bodyParser());
#			app.use(express.methodOverride());
#			/* Default assets (different for debug/production modes) */
#			app.use(assets.defaults);
#			/* Routing (must come AFTER other middleware excluding statics) */
#			app.use(app.router);
#			/* Static (used only when router can't route) */
#			if (app.locals.debug)
#				app.use(express.static(path.join(__dirname, 'public/debug'), { maxAge: 5000 }));
#			else
#				app.use(express.static(path.join(__dirname, 'public/production'), { maxAge: static_expires }));
#
#		#		/* Add routes and season to taste */
#		#		/* ... */
#
#			/* Debug mode: enable pretty error handler */
#			if (app.locals.debug)
#				app.use(express.errorHandler());
#		})
#
#		/* Remember to start your HTTP server at some point after here... */
#

# Reads the comment block from the start of this script and displays it as help
function doHelp {
	local SECTION="$1" BLOCK=0 LINE
	while read LINE
	do
		# Blank line?  Increase block number
		[ "${LINE::1}" != "#" ] && ((BLOCK++)) && continue
		# Early section? Continue
		[ "$BLOCK" -lt "$SECTION" ] && continue
		# Late section? Break
		[ "$BLOCK" -gt "$SECTION" ] && break
		# White header
		[ "${LINE::3}" == "#		" ] && echo -ne '\E[0;37m' || echo -ne '\E[1;37m'
		# Print line excluding comment character (tab indent = 4 spaces)
		echo "${LINE:2}" | sed 's:\t:    :g'
	done < "$0"
	echo -ne '\E[0;37m'
}

# Name of the script file to launch (overriden by --app option)
APP="app"

# Program to launch script with (e.g. express, node)
HOST="node"

# Extra parameters for 'forever'
FOREVER_OPTIONS="--minUptime=5000 --spinSleepTime=1000"

# Disable updating of assets
NO_ASSETS=1

# Commands for 'lessc' and 'uglifyjs'
CMDPATH="$PWD/node_modules/.bin"
LESSC_COMMAND="$CMDPATH/lessc"
UGLIFYJS_COMMAND="$CMDPATH/uglifyjs2"

# Parameters for 'lessc' and 'uglifyjs'
LESSC_OPTIONS="- --compress --yui-compress"
UGLIFYJS_OPTIONS="- --compress --mangle"

# Debug versions of the above
LESSC_DEBUG_COMMAND="$LESSC_COMMAND"
UGLIFYJS_DEBUG_COMMAND="cat"
LESSC_DEBUG_OPTIONS="-"
UGLIFYJS_DEBUG_OPTIONS=""

# Name of app (default is current working directory)
APPNAME="${PWD##*/}"

# Base name of log files
LOG="/var/log/node-$APPNAME"

# Output root
OUTROOT="./public/release"

# Pidfile for debug instance
PIDFILE="/tmp/.node-$APPNAME.pid"

# Log raw message
function logr {
	echo "$@" >> "$LOG.run"
	[ "$2" ] &&	echo -ne "$2" || echo -ne '\E[0;37;40m'
	echo -n "$1"
	[ "$2" ] && echo -e '\E[0;37;40m' || echo ""
}

# Log list messages
function logl {
	logr " - $@" '\E[0;37m'
}

# Log title messages
function logt {
	logr "$@" '\E[1;37;40m'
}

# Log heading messages
function logh {
	logr "$@" '\E[1;33;44m'
}

# Log error messages
function loge {
	logr " - $1" '\E[1;31;40m'
	echo ""
	echo -e '\E[1;37;40mBegin log tail\E[0;37;40m'
	tail -n 10 "$LOG.run"
	echo -e '\E[1;37;40mEnd log tail\E[0;37;40m'
	exit $2
}

# Log warning messages
function logw {
	logr " - $@" '\E[1;33;40m'
}

# Initialise flags
PRODUCTION=
DEBUG=
REBUILD=
KILL=
CLEAN=
UPDATE=
NOSTART=
APPENDLOG=

# Parses a parameter, returns number of parameters taken
function parseParam {
	local HYPHENS="$1" FLAG="$2" OPTION="$3"
	
	# To lowercase
	FLAG="${FLAG,,}"
	
	# Expand single-hyphen codes to words
	if [ $HYPHENS -le 1 ]
	then
		case "$FLAG" in
			a) FLAG='app';;
			c) FLAG='clean';;
			d) FLAG='debug';;
			e) FLAG='example';;
			h) FLAG='help';;
			k) FLAG='kill';;
			n) FLAG='no-start';;
			p) FLAG='production';;
			r) FLAG='rebuild';;
			u) FLAG='update';;
			*) loge "Unrecognised parameter: -$FLAG";;
		esac
	fi
	
	# Parse words
	case "$FLAG" in
		production	) PRODUCTION=1;;
		debug		) DEBUG=1;;
		rebuild		) REBUILD=1;;
		kill		) KILL=1;;
		clean		) CLEAN=1;;
		update		) UPDATE=1;;
		help		) doHelp 1;;
		example		) doHelp 2;;
		app			) [ -f "$OPTION" ] && APP="$OPTION" && return 1 || loge "Node.js application '$OPTION' not found";;
		no-start	) NOSTART=1;;
		appendlog	) APPENDLOG=1;;
		*) loge "Unrecognised parameter: --$FLAG";;
	esac
	
	return 0
}
while [ "$1" ]
do
	# Pop leading token
	FLAG="$1"
	shift
	# Expand macros
	if [ "${FLAG::1}" == "+" ]
	then
		case "${FLAG:1}" in
			production		) FLAG="-kcrp";;
			debug			) FLAG="-kcrd";;
			update-assets	) FLAG="-nudp";;
			refresh-assets	) FLAG="-kcr";;
			prepare-release	) FLAG="-kc";;
			*				) loge "Unknown macro: '$FLAG'";;
		esac
	fi
	# Strip and count leading hyphen(s)
	HYPHENS=0
	while [ "${FLAG::1}" == "-" ]
	do
		FLAG="${FLAG:1}"
		((HYPHENS++))
	done
	# Split single/no hyphen command into separate single-char commands
	if [ $HYPHENS -le 1 ]
	then
		OPTION=
		while [ "$FLAG" ]
		do
			# Get char
			CHAR="${FLAG::1}"
			# Remove char from remaining char list
			FLAG="${FLAG:1}"
			# Parse the command
			# The last char can accept additional parameters
			if [ -z "$FLAG" ]
			then
				parseParam $HYPHENS "$CHAR" "$@"
				TAKEN=$?
			else
				parseParam $HYPHENS "$CHAR"
				TAKEN=$?
			fi
			# Ensure that only the last char can chomp extra parameters
			[ "$FLAG" ] && [ $TAKEN -gt 0 ] && loge "Option -$CHAR requires additional parameter"
			# Remove parsed tokens
			shift $TAKEN
		done
	# Parse double-hyphen command as one word
	elif [ $HYPHENS == 2 ]
	then
		# Parse the command
		parseParam $HYPHENS "$FLAG" "$@"
		# Remove parsed tokens
		shift $?
	fi
done

# Path of script file
[ -f "$APP" ] && SCRIPT="$APP" || [ -f "$APP.js" ] && SCRIPT="$APP.js"

# Clear logs
for LOGFILE in $LOG.{run,out,err,for}
do
	if [ "$APPENDLOG" ]
	then
		date --iso-8601=seconds >>"$LOGFILE"
	else
		date --iso-8601=seconds >"$LOGFILE"
	fi
done

# Sanity check
if [ "$PRODUCTION" ] && [ "$DEBUG" ] && [ ! "$NOSTART" ]
then
	echo "Production (-p) and debug (-d) are mutually exclusive"
	exit 1
fi

# Ensure a command was specified
if [ -z "$PRODUCTION$DEBUG$REBUILD$UPDATE$KILL$CLEAN" ]
then
	echo "No commands specified"
	exit 1
fi

# Asset sanity check
if [ "$REBUILD$UPDATE$CLEAN" ] && [ "$NO_ASSETS" ]
then
	logw "Management of assets has been disabled in the run script (NO_ASSETS)"
	[ "$REBUILD" ] && logw "Rebuild command ignored" && REBUILD=
	[ "$UPDATE" ] && logw "Update command ignored" && UPDATE=
	[ "$CLEAN" ] && logw "Clean command ignored" && CLEAN=
fi

# Clean all
if [ "$CLEAN" ] && [ -z "$PRODUCTION" ] && [ -z "$DEBUG" ]
then
	"$0" -cdn --appendlog && RESD=$?
	"$0" -cpn --appendlog && RESP=$?
	[ RESD ] && [ RESP ] || loge "failed!" 1
	CLEAN=
fi

# Rebuild all
if [ "$REBUILD" ] && [ -z "$PRODUCTION" ] && [ -z "$DEBUG" ]
then
	"$0" -rdn --appendlog && RESD=$?
	"$0" -rpn --appendlog && RESP=$?
	[ RESD ] && [ RESP ] || loge "failed!" 1
	REBUILD=
fi

# Update all
if [ "$UPDATE" ] && [ -z "$PRODUCTION" ] && [ -z "$DEBUG" ]
then
	"$0" -udn --appendlog && RESD=$?
	"$0" -upn --appendlog && RESP=$?
	[ RESD ] && [ RESP ] || loge "failed!" 1
	UPDATE=
fi

# Production mode
if [ "$PRODUCTION" ]
then
	logh "Production mode"
fi

# Debug mode
if [ "$DEBUG" ]
then
	logh "Debug mode"
	OUTROOT="./public/debug"
	LESSC_COMMAND="$LESSC_DEBUG_COMMAND"
	UGLIFYJS_COMMAND="$UGLIFYJS_DEBUG_COMMAND"
	LESSC_OPTIONS="$LESSC_DEBUG_OPTIONS"
	UGLIFYJS_OPTIONS="$UGLIFYJS_DEBUG_OPTIONS"
fi

# Kill mode
if [ "$KILL" ]
then
	# Stop previous instances
	logt "Stopping previous instance"
	forever stop "$SCRIPT" &> /dev/null && logl "production"
	[ -e "$PIDFILE" ] && kill `cat "$PIDFILE"` &>/dev/null && logl "debug"
fi

# Clean
if [ "$CLEAN" ]
then
	logt "Cleaning old files"
	for FILE in $OUTROOT/stylesheets/*.css $OUTROOT/javascripts/*.js
	do
		[ -e "$FILE" ] || continue;
		logl "$FILE"
		rm "$FILE" 2>"$LOG.run" || logw "Failed to delete file '$FILE'"
	done
fi

# Build needed?
BUILD=
if [ "$REBUILD" ] || [ -z "$NOSTART" ] && ([ "$PRODUCTION" ] || [ "$DEBUG" ])
then
	BUILD=1
fi

# Update assets
if ([ "$UPDATE" ] || [ "$BUILD" ]) && [ -z "$NO_ASSETS" ]
then

	# Updates files that are newer than their parsed counterparts, returns false if no files were updates
	function update {
		# Build list of files to update
		local FOLDER="$1" INEXT="$2" OUTEXT="$3" CMD="$4" CMDPARAMS="$5" NAMES="" RESULT
		# Make list of files to update
		FILES=( ./assets/$FOLDER/?*.$INEXT )
		if [ ! -f "${FILES[0]}" ]
		then
			# logt "No $FOLDER ($INEXT) found"
			return 1
		fi
		logt "Checking $FOLDER ($INEXT) for changes"
		for IN in "${FILES[@]}"
		do
			NAME=`echo "$IN" | perl -pe 's/^.*\/([^\/\.]+)\.[a-z]+$/\1/g'`
			OUT="$OUTROOT/$FOLDER/$NAME.$OUTEXT"
			if [ "$REBUILD" ] || [ ! -e "$OUT" ] || [ "$OUT" -ot "$IN" ]
			then
				NAMES="$NAMES $NAME"
			fi
		done
		# Create output directory if needed
		if [ -d "$OUTROOT/$FOLDER" ]
		then
			mkdir -p "$OUTROOT/$FOLDER"
		fi
		# Update files if needed
		if [ "$NAMES" ]
		then
			for NAME in $NAMES
			do
				logl "$NAME"
				# Run command from within the asset folder, in order to allow relative includes to work
				# Output path and command path should be made absolute or relative to asset folder
				local IN OUT RELIN ABSOUT
				IN="./assets/$FOLDER/$NAME.$INEXT"
				OUT="$OUTROOT/$FOLDER/$NAME.$OUTEXT"
				RELIN="$NAME.$INEXT"
				ABSOUT="$PWD/`realpath --relative-to="$PWD" "$OUT"`"
				[ "${CMD::2}" == "./" ] && ABSCMD="$PWD/`realpath --relative-to="$PWD" "$CMD"`" || ABSCMD="$CMD"
				# Enter source folder and execute command
				pushd "assets/$FOLDER" >/dev/null
				"$ABSCMD" $CMDPARAMS <"$RELIN" 1>"$ABSOUT" 2>>"$LOG.run"
				RESULT=$?
				# Set modification date of out-file to that of in-file
				[ $RESULT == 0 ] && touch -cm "$ABSOUT" -r "$RELIN"
				# Leave source folder
				popd >/dev/null
				# Raise exception if operation failed
				[ $RESULT == 0 ] || loge "'$CMD' failed to update '$OUT' from '$IN', exit code=$RESULT" 2
			done
			return 0
		else
			return 1
		fi
	}

	function merge {
		local FOLDER="$1" INEXT="$2" OUTFILE="$3" CMD="$4" CMDPARAMS="$5" NAMES="" RESULT
		local ABSOUT FILES
		logt "Merging default $FOLDER"
		ABSOUT="$PWD/`realpath --relative-to="$PWD" "$OUTROOT/$FOLDER/$OUTFILE"`"
		pushd "assets/$FOLDER" >/dev/null
		xargs -L 1 printf "%s.$INEXT\n" <defaults |
		xargs -L 1 -I % sh -c "echo '\n/* Begin file: '%' */\n'; cat %; echo '\n/* End file: '%' */\n';" |
		tee /tmp/merged.$INEXT |
		"$CMD" $CMDPARAMS 1>"$ABSOUT" 2>>"$LOG.run"
		RESULT=$?
		popd >/dev/null
		[ $RESULT == 0 ] || loge "Failed to merge $FOLDER, exit code=$RESULT" 3
	}

	# Stylesheets
	if update "stylesheets" "less" "css" "$LESSC_COMMAND" "$LESSC_OPTIONS" && [ "$PRODUCTION" ]
	then
		merge "stylesheets" "less" "lessifed.css" "$LESSC_COMMAND" "$LESSC_OPTIONS"
	fi

	# Javascripts
	if update "javascripts" "js" "js" "$UGLIFYJS_COMMAND" "$UGLIFYJS_OPTIONS" && [ "$PRODUCTION" ]
	then
		merge "javascripts" "js" "merged.js" "$LESSC_COMMAND" "$LESSC_OPTIONS"
	fi

	# Images
	for IMAGE_EXT in png jpg jpeg svg bmp gif ico
	do
		update "images" "$IMAGE_EXT" "$IMAGE_EXT" "cat" "" && [ "$PRODUCTION" ]
	done
fi

# Start script
if [ -z "$NOSTART" ]
then
	if [ ! -f "$SCRIPT" ]
	then
		loge "Node.js application '$APP' not found"
	fi
	if [ "$PRODUCTION" ]
	then
		[ "$KILL" ] || "$0" k
		logt "Launching node server in permanent mode"
		rm "$LOG.for"
		forever start $FOREVER_OPTIONS -c "$HOST" -l "$LOG.for" -o "$LOG.out" -e "$LOG.err" "$SCRIPT"
	fi
	if [ "$DEBUG" ]
	then
		[ "$KILL" ] || "$0" k
		logt "Launching node server in debug mode"
		"$HOST" "$SCRIPT" --debug & echo "$!" >"$PIDFILE"
	fi
fi
